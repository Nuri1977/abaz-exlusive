generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified Boolean?
  image         String?
  password      String?
  isAdmin       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  cart          Cart?
  likes         Like[]
  orders        Order[]
  sessions      Session[]

  @@map("user")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(uuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("account")
}

model Verification {
  id         String    @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("verification")
}

model Category {
  id          String     @id @default(uuid())
  name        String
  slug        String     @unique
  description String?
  parentId    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  image       Json?      @default("null")
  isActive    Boolean    @default(true)
  level       Int        @default(0)
  parent      Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToCategory")
  products    Product[]

  @@index([parentId])
  @@map("category")
}

model Product {
  id          String           @id @default(uuid())
  name        String
  slug        String           @unique
  description String?
  price       Decimal          @db.Decimal(10, 2)
  categoryId  String
  category    Category         @relation(fields: [categoryId], references: [id])
  options     ProductOption[]
  variants    ProductVariant[]
  cartItems   CartItem[]
  orderItems  OrderItem[]
  likes       Like[]
  newArrivals NewArrivals[]
  bestSellers BestSellers[]
  // Shoe specific details
  brand       String?
  material    String?
  gender      String?
  style       String?
  features    String[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  images      Json[]

  @@map("product")
}

model ProductOption {
  id        String               @id @default(uuid())
  name      String
  productId String
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  product   Product              @relation(fields: [productId], references: [id], onDelete: Cascade)
  values    ProductOptionValue[]

  @@map("product_option")
}

model ProductOptionValue {
  id        String                 @id @default(uuid())
  value     String
  optionId  String
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt
  option    ProductOption          @relation(fields: [optionId], references: [id], onDelete: Cascade)
  variants  ProductVariantOption[]

  @@map("product_option_value")
}

model ProductVariant {
  id         String                 @id @default(uuid())
  productId  String
  sku        String                 @unique
  price      Decimal?               @db.Decimal(10, 2)
  stock      Int                    @default(0)
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt
  cartItems  CartItem[]
  inventory  InventoryItem?
  orderItems OrderItem[]
  product    Product                @relation(fields: [productId], references: [id], onDelete: Cascade)
  options    ProductVariantOption[]

  @@map("product_variant")
}

model ProductVariantOption {
  variantId     String
  optionValueId String
  optionValue   ProductOptionValue @relation(fields: [optionValueId], references: [id], onDelete: Cascade)
  variant       ProductVariant     @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@id([variantId, optionValueId])
  @@map("product_variant_option")
}

model InventoryItem {
  id        String         @id @default(uuid())
  sku       String         @unique
  quantity  Int            @default(0)
  reserved  Int            @default(0)
  variantId String         @unique
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  variant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@map("inventory_item")
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  total     Decimal    @db.Decimal(10, 2)
  currency  String     @default("USD")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]

  @@map("cart")
}

model CartItem {
  id        String          @id @default(uuid())
  cartId    String
  variantId String?
  quantity  Int             @default(1)
  price     Decimal         @db.Decimal(10, 2)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  productId String?
  cart      Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
  Product   Product?        @relation(fields: [productId], references: [id])
  variant   ProductVariant? @relation(fields: [variantId], references: [id])

  @@unique([cartId, variantId])
  @@map("cart_item")
}

model Order {
  id              String        @id @default(uuid())
  userId          String?
  status          OrderStatus   @default(PENDING)
  total           Decimal       @db.Decimal(10, 2)
  shippingAddress String
  billingAddress  String
  paymentStatus   PaymentStatus @default(PENDING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User?         @relation(fields: [userId], references: [id], onDelete: Restrict)
  items           OrderItem[]
  phone           String?
  customerName    String?
  customerEmail   String?

  @@map("order")
}

model OrderItem {
  id        String          @id @default(uuid())
  orderId   String
  variantId String?
  quantity  Int
  price     Decimal         @db.Decimal(10, 2)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  productId String?
  order     Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  Product   Product?        @relation(fields: [productId], references: [id])
  variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Restrict)

  @@map("order_item")
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("like")
}

model Gallery {
  id           String   @id @default(cuid())
  name         String
  size         Int
  key          String   @unique
  lastModified Int
  serverData   Json
  url          String
  appUrl       String
  ufsUrl       String
  customId     String?
  type         String
  fileHash     String
  reference    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  metadata     Json
  height       Int?
  isDeleted    Boolean  @default(false)
  tags         String[]
  uploadedBy   String?
  usedIn       Json[]
  width        Int?

  @@map("gallery")
}

model MediaUsage {
  id         String   @id @default(cuid())
  mediaId    String
  entityId   String
  entityType String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([mediaId, entityId, entityType])
  @@map("media_usage")
}

model Settings {
  id        String   @id @default("default")
  name      String
  address   String
  city      String
  state     String
  telephone String
  email     String
  facebook  String?
  twitter   String?
  instagram String?
  youtube   String?
  aboutInfo String
  aboutUs   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

model NewArrivals {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("new_arrivals")
}

model BestSellers {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("best_sellers")
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}
